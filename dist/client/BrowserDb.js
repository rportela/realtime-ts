"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BrowserDbCollection_1 = require("./BrowserDbCollection");
/**
 * IndexedDB is a low-level API for client-side storage of significant amounts of structured data, including files/blobs.
 * This API uses indexes to enable high-performance searches of this data.
 * While Web Storage is useful for storing smaller amounts of data, it is less useful for storing larger amounts of structured data.
 * IndexedDB provides a solution.
 * @author Rodrigo Portela <rodrigo.portela@gmail.com>
 */
class BrowserDb {
    constructor(schema) {
        this.schema = schema;
        this.open = new Promise((resolve, reject) => {
            const req = indexedDB.open(schema.name, schema.version);
            req.onerror = () => reject(req.error);
            req.onblocked = () => reject(req.error);
            req.onsuccess = () => resolve(req.result);
            req.onupgradeneeded = () => {
                const db = req.result;
                for (const name of db.objectStoreNames)
                    db.deleteObjectStore(name);
                for (const col of schema.collections) {
                    db.createObjectStore(col.name, {
                        keyPath: col.keyPath,
                        autoIncrement: col.autoGenerated,
                    });
                }
            };
        });
        this.collections = this.open.then((db) => this.schema.collections.map((col) => new BrowserDbCollection_1.default(db, col)));
    }
    getName() {
        return this.schema.name;
    }
    getVersion() {
        return this.schema.version;
    }
    getCollections() {
        return this.collections;
    }
    getCollection(name) {
        return this.collections.then((cols) => cols.find((col) => col.getName() === name));
    }
    drop() {
        return new Promise((resolve, reject) => {
            const req = indexedDB.deleteDatabase(this.schema.name);
            req.onsuccess = () => resolve(req.result);
            req.onerror = () => reject(req.error);
        });
    }
    getSchema() {
        return this.schema;
    }
}
exports.default = BrowserDb;
